name: Main CI Pipeline

on:
  pull_request:
  push:
    branches:
      - 'main'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  DOCKER_IMAGE_NAME: discogs-query-api

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_output.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - name: 'Get next minor version'
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}

      - name: Show the next version
        run: |
          echo "Next version: ${{ steps.semvers.outputs.minor  }}"

      - name: Remove v prefix
        id: removev
        run: echo "ref_name=$(echo ${{ steps.semvers.outputs.minor  }} | sed 's/^v//')" >> $GITHUB_ENV

      - name: Set output for version
        id: set_output
        run: echo "::set-output name=version::${{ steps.semvers.outputs.minor  }}"

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [ setup ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Cache Maven Packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          java-version: '24'
          distribution: 'corretto'
          cache: maven

      - name: Set Version With Maven
        run: mvn versions:set -DnewVersion=${{ needs.setup.outputs.version }}

      - name: Install backend dependencies
        run: mvn clean install -DskipTests
        env:
          DISCOGS_TOKEN: ${{ secrets.DISCOGS_TOKEN }}
          DISCOGS_AGENT: ${{ secrets.DISCOGS_AGENT }}

      - name: Run tests and build javadoc
        run: mvn clean install javadoc:javadoc -Dmaven.javadoc.additionalparam=-Xdoclint:none -Dmaven.javadoc.failOnError=false
        env:
          DISCOGS_TOKEN: ${{ secrets.DISCOGS_TOKEN }}
          DISCOGS_AGENT: ${{ secrets.DISCOGS_AGENT }}

      - name: Zip Javadoc
        run: |
          mkdir -p target/site/apidocs
          zip -r target/site/apidocs.zip target/site/apidocs || exit 1
          echo "Javadoc zip created."

      - name: Upload Javadoc Artifact
        uses: actions/upload-artifact@v4
        with:
          name: javadoc.zip
          path: target/site/apidocs.zip

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [ setup ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '24.x'

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: src/main/frontend/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('src/main/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install frontend dependencies
        run: |
          cd src/main/frontend
          yarn install --frozen-lockfile

      - name: Run Frontend Build
        run: cd src/main/frontend && yarn run build

      - name: Generate NPM Documents
        run: |
          cd src/main/frontend
          # Create jsdoc.json if it doesn't exist
          if [ ! -f jsdoc.json ]; then
            echo '{
              "source": {
                "include": ["src"],
                "includePattern": ".+\\.(js|jsx|ts|tsx)$",
                "excludePattern": "(node_modules/|docs/)"
              },
              "plugins": ["plugins/markdown"],
              "opts": {
                "destination": "docs",
                "recurse": true
              }
            }' > jsdoc.json
          fi
          npx jsdoc src -c jsdoc.json -d docs -r

      - name: Zip JSDoc
        run: |
          mkdir -p src/main/frontend/docs
          zip -r src/main/frontend/docs.zip src/main/frontend/docs || exit 1
          echo "JSDoc zip created."

      - name: Upload JSDoc Artifact
        uses: actions/upload-artifact@v4
        with:
          name: jsdoc.zip
          path: src/main/frontend/docs.zip

  

  auto_merge:
    name: Auto approve & merge bot PRs
    needs: [ build-backend, build-frontend ]
    if: >
      github.event_name == 'pull_request' &&
      (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped') &&
      (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped')
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write

    strategy:
      matrix:
        bot:
          - 'dependabot[bot]'
          - 'deepsource-autofix[bot]'
          - 'snyk-bot'
          - 'renovate[bot]'

    steps:
      - name: Fetch Dependabot metadata
        if: ${{ github.event.pull_request.user.login == matrix.bot && matrix.bot == 'dependabot[bot]' }}
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Approve & merge PR
        if: ${{ github.event.pull_request.user.login == matrix.bot }}
        run: |
          gh pr review --approve "$PR_URL"
          gh pr merge --squash --auto "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  release:
    name: Create Release
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [ setup, build-backend, build-frontend ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Download Javadoc Artifact
        uses: actions/download-artifact@v5
        with:
          name: javadoc.zip
          path: target/site

      - name: Download JSDoc Artifact
        uses: actions/download-artifact@v5
        with:
          name: jsdoc.zip
          path: src/main/frontend

      - name: Generate Changelog
        uses: Bullrich/generate-release-changelog@master
        id: Changelog
        env:
          REPO: ${{ github.repository }}
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ needs.setup.outputs.version }}
          tag_name: ${{ needs.setup.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true
          files: |
            target/site/javadoc.zip
            src/main/frontend/jsdoc.zip
          body: ${{ steps.Changelog.outputs.changelog }}
