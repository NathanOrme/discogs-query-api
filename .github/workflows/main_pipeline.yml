name: Main CI Pipeline

on:
  pull_request:
  push:
    branches:
      - 'main'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

env:
  DOCKER_IMAGE_NAME: my-image

jobs:
  detect-changes:
    name: Detect File Changes
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.filter.outputs.backend }}
      frontend_changed: ${{ steps.filter.outputs.frontend }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Detect Changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - '**/*.java'
              - '**/*.xml'
              - 'pom.xml'
            frontend:
              - 'src/main/frontend/**'

  setup:
    runs-on: ubuntu-latest
    needs: [ detect-changes ]
    if: >
      needs.detect-changes.outputs.backend_changed == 'true' || 
      needs.detect-changes.outputs.frontend_changed == 'true' || 
      github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.set_output.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get next version
        id: get_semver
        uses: rickstaa/action-get-semver@v1
        with:
          bump_level: "minor"

      - name: Show the next version
        run: |
          echo "Next version: ${{ steps.get_semver.outputs.next_version }}"

      - name: Remove v prefix
        id: removev
        run: echo "ref_name=$(echo ${{ steps.get_semver.outputs.next_version }} | sed 's/^v//')" >> $GITHUB_ENV

      - name: Set output for version
        id: set_output
        run: echo "::set-output name=version::${{ steps.get_semver.outputs.next_version }}"

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [ setup ]
    if: >
      needs.detect-changes.outputs.backend_changed == 'true' || 
      github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libc6

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag $DOCKER_IMAGE_NAME:${{ needs.setup.outputs.version }}

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [ setup ]
    if: >
      needs.detect-changes.outputs.backend_changed == 'true' || 
      github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Maven Packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'corretto'
          cache: maven

      - name: Set Version With Maven
        run: mvn versions:set -DnewVersion=${{ needs.setup.outputs.version }}

      - name: Install backend dependencies
        run: mvn clean install -DskipTests
        env:
          DISCOGS_TOKEN: ${{ secrets.DISCOGS_TOKEN }}
          DISCOGS_AGENT: ${{ secrets.DISCOGS_AGENT }}

      - name: Run Checkstyle
        run: mvn checkstyle:check -Dcheckstyle.config.location=lint/checkstyle.xml
        env:
          DISCOGS_TOKEN: ${{ secrets.DISCOGS_TOKEN }}
          DISCOGS_AGENT: ${{ secrets.DISCOGS_AGENT }}

      - name: Run tests and build javadoc
        run: mvn clean install javadoc:javadoc -Dmaven.javadoc.additionalparam=-Xdoclint:none -Dmaven.javadoc.failOnError=false
        env:
          DISCOGS_TOKEN: ${{ secrets.DISCOGS_TOKEN }}
          DISCOGS_AGENT: ${{ secrets.DISCOGS_AGENT }}

      - name: Zip Javadoc
        run: |
          mkdir -p target/site/apidocs
          zip -r target/site/apidocs.zip target/site/apidocs || exit 1
          echo "Javadoc zip created."

      - name: Upload Javadoc Artifact
        uses: actions/upload-artifact@v4
        with:
          name: javadoc.zip
          path: target/site/apidocs.zip

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [ setup ]
    if: >
      needs.detect-changes.outputs.frontend_changed == 'true' || 
      github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: ~/src/main/frontend/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('src/main/frontend/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Yarn project
        run: |
          cd src/main/frontend
          yarn install

      - name: Run Frontend Build
        run: cd src/main/frontend && yarn run build

      - name: Generate NPM Documents
        run: cd src/main/frontend &&  npx jsdoc src -c jsdoc.json -d docs -r

      - name: Zip JSDoc
        run: |
          mkdir -p src/main/frontend/docs
          zip -r src/main/frontend/docs.zip src/main/frontend/docs || exit 1
          echo "JSDoc zip created."

      - name: Upload JSDoc Artifact
        uses: actions/upload-artifact@v4
        with:
          name: jsdoc.zip
          path: src/main/frontend/docs.zip

  

  auto_merge:
    name: Auto approve & merge bot PRs
    needs: [ build-frontend, build-backend, docker ]
    # only run the job for pull_request events
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write

    strategy:
      matrix:
        bot:
          - 'dependabot[bot]'
          - 'deepsource-autofix[bot]'
          - 'snyk-bot'
          - 'renovate[bot]'

    steps:
      - name: Fetch Dependabot metadata
        if: ${{ github.event.pull_request.user.login == matrix.bot && matrix.bot == 'dependabot[bot]' }}
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Approve & merge PR
        if: ${{ github.event.pull_request.user.login == matrix.bot }}
        run: |
          gh pr review --approve "$PR_URL"
          gh pr merge --squash --auto "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ setup, build-backend, build-frontend, docker ]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Javadoc Artifact
        uses: actions/download-artifact@v4
        with:
          name: javadoc.zip
          path: target/site

      - name: Download JSDoc Artifact
        uses: actions/download-artifact@v4
        with:
          name: jsdoc.zip
          path: src/main/frontend

      - name: Generate Changelog
        uses: Bullrich/generate-release-changelog@master
        id: Changelog
        env:
          REPO: ${{ github.repository }}
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ needs.setup.outputs.version }}
          tag_name: ${{ needs.setup.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true
          files: |
            target/site/javadoc.zip
            src/main/frontend/jsdoc.zip
          body: ${{ steps.Changelog.outputs.changelog }}
