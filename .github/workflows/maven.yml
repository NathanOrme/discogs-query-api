name: Java and Jest CI with Maven

on:
  pull_request:
  push:
    branches:
      - 'main'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_output.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get next version
        id: get_semver
        uses: rickstaa/action-get-semver@v1
        with:
          bump_level: "minor"

      - name: Show the next version
        run: |
          echo "Next version: ${{ steps.get_semver.outputs.next_version }}"

      - name: Remove v prefix
        id: removev
        run: echo "ref_name=$(echo ${{ steps.get_semver.outputs.next_version }} | sed 's/^v//')" >> $GITHUB_ENV

      - name: Set output for version
        id: set_output
        run: echo "::set-output name=version::${{ steps.get_semver.outputs.next_version }}"

  build:
    runs-on: ubuntu-latest
    needs: [ setup ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Maven Packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Ensure Version is Available
        id: check_version
        run: |
          if [ -z "${{ needs.setup.outputs.version }}" ]; then
            echo "Version is not available. Failing the build."
            exit 1
          else
            echo "Version from setup: ${{ needs.setup.outputs.version }}"
          fi

      - name: Set Version With Maven
        run: mvn versions:set -DnewVersion=${{ needs.setup.outputs.version }} -f backend/pom.xml

      - name: Install backend dependencies
        run: mvn clean install -DskipTests -f backend/pom.xml
        env:
          DISCOGS_TOKEN: ${{ secrets.DISCOGS_TOKEN }}
          DISCOGS_AGENT: ${{ secrets.DISCOGS_AGENT }}

      - name: Run Checkstyle
        run: mvn checkstyle:check -Dcheckstyle.config.location=lint/checkstyle.xml -f backend/pom.xml
        env:
          DISCOGS_TOKEN: ${{ secrets.DISCOGS_TOKEN }}
          DISCOGS_AGENT: ${{ secrets.DISCOGS_AGENT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker build -t discogs-app -f Dockerfile .

      - name: Zip Javadoc
        run: |
          mkdir -p target/site/apidocs
          zip -r target/site/apidocs.zip target/site/apidocs || exit 1
          echo "Javadoc zip created."

      - name: Generate Changelog
        uses: Bullrich/generate-release-changelog@master
        id: Changelog
        env:
          REPO: ${{ github.repository }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        if: github.ref == 'refs/heads/main'
        with:
          name: Release ${{ needs.setup.outputs.version }}
          tag_name: ${{ needs.setup.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true
          files: target/site/apidocs.zip
          body: ${{ steps.Changelog.outputs.changelog }}
