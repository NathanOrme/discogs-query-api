name: Java CI with Maven

on:
  pull_request:
  push:
    branches:
      - 'main'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

env:
  DOCKER_IMAGE_NAME: my-image

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_output.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get next version
        id: get_semver
        uses: rickstaa/action-get-semver@v1
        with:
          bump_level: "minor"

      - name: Show the next version
        run: |
          echo "Next version: ${{ steps.get_semver.outputs.next_version }}"

      - name: Remove v prefix
        id: removev
        run: echo "ref_name=$(echo ${{ steps.get_semver.outputs.next_version }} | sed 's/^v//')" >> $GITHUB_ENV

      - name: Set output for version
        id: set_output
        run: echo "::set-output name=version::${{ steps.get_semver.outputs.next_version }}"

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [ setup ]
    if: ${{ github.event_name == 'push' }} # Optional, run only on push events
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libc6

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag $DOCKER_IMAGE_NAME:${{ needs.setup.outputs.version }}

  backend:
    name: Build and Test Backend
    runs-on: ubuntu-latest
    needs: [ setup ]
    if: ${{ github.event.pull_request || github.event.push }}
    steps:
      - name: Check for backend changes
        id: backend_changes
        run: |
          echo "Checking for changes in backend files..."
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^src/main/(java|resources)' || exit 1

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache Maven Packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Install backend dependencies
        run: mvn clean install -DskipTests
        env:
          DISCOGS_TOKEN: ${{ secrets.DISCOGS_TOKEN }}
          DISCOGS_AGENT: ${{ secrets.DISCOGS_AGENT }}

      - name: Run Checkstyle
        run: mvn checkstyle:check -Dcheckstyle.config.location=lint/checkstyle.xml
        env:
          DISCOGS_TOKEN: ${{ secrets.DISCOGS_TOKEN }}
          DISCOGS_AGENT: ${{ secrets.DISCOGS_AGENT }}

      - name: Run tests and build javadoc
        run: mvn clean install javadoc:javadoc
        env:
          DISCOGS_TOKEN: ${{ secrets.DISCOGS_TOKEN }}
          DISCOGS_AGENT: ${{ secrets.DISCOGS_AGENT }}

  frontend:
    name: Build and Test Frontend
    runs-on: ubuntu-latest
    needs: [ setup ]
    if: ${{ github.event.pull_request || github.event.push }}
    steps:
      - name: Check for frontend changes
        id: frontend_changes
        run: |
          echo "Checking for changes in frontend files..."
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^src/main/frontend' || exit 1

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install NPM dependencies
        run: |
          cd src/main/frontend
          npm install

      - name: Generate JSDoc
        run: |
          cd src/main/frontend
          npx jsdoc src -c jsdoc.json -d docs -r

      - name: Zip JSDoc
        run: |
          cd src/main/frontend
          zip -r docs/jsdocs.zip docs

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ backend, frontend, setup ]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Generate Changelog
        uses: Bullrich/generate-release-changelog@master
        id: changelog
        env:
          REPO: ${{ github.repository }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ needs.setup.outputs.version }}
          tag_name: ${{ needs.setup.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true
          files: |
            target/site/apidocs.zip
            src/main/frontend/docs/jsdocs.zip
          body: ${{ steps.changelog.outputs.changelog }}
