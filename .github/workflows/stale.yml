name: Clean Up Branches

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight UTC
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  clean-up-branches:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

      - name: Fetch all branches
        run: git fetch --all

      - name: Clean up branches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the current date
          CURRENT_DATE=$(date +%s)
          
          # Set the number of days to consider a branch stale
          STALE_DAYS=7
          
          # Convert days to seconds
          STALE_SECONDS=$((STALE_DAYS * 86400))
          
          # Default branch name
          DEFAULT_BRANCH="main"
          
          # List all remote branches
          BRANCHES=$(git branch -r | grep -v '\->')

          for BRANCH in $BRANCHES; do
            # Remove 'origin/' prefix from branch name
            BRANCH_NAME=$(echo $BRANCH | sed 's/origin\///')
          
            # Skip if the branch is the default branch or if it's the current branch
            if [ "$BRANCH_NAME" = "$DEFAULT_BRANCH" ] || [ "$BRANCH_NAME" = $(git symbolic-ref --short HEAD) ]; then
              continue
            fi
          
            # Get the last commit date on the branch
            LAST_COMMIT_DATE=$(git log -1 --format="%at" origin/$BRANCH_NAME)
          
            # Calculate the age of the branch
            BRANCH_AGE=$((CURRENT_DATE - LAST_COMMIT_DATE))
          
            # Check if the branch has been merged into the default branch
            if git merge-base --is-ancestor origin/$DEFAULT_BRANCH origin/$BRANCH_NAME; then
              echo "Branch $BRANCH_NAME has been merged into $DEFAULT_BRANCH."
              # Delete merged branches
              echo "Deleting merged branch: $BRANCH_NAME"
              git push origin --delete $BRANCH_NAME
            elif [ $BRANCH_AGE -gt $STALE_SECONDS ]; then
              # Delete stale branches that are not merged
              echo "Deleting stale branch: $BRANCH_NAME"
              git push origin --delete $BRANCH_NAME
            else
              echo "Skipping branch $BRANCH_NAME: Not merged and not stale."
            fi
          done
        shell: bash
