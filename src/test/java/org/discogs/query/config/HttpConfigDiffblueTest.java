package org.discogs.query.config;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MappingJsonFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.CacheProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DefaultCacheProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy;
import com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.Serializers;
import com.fasterxml.jackson.databind.ser.impl.FailingSerializer;
import com.fasterxml.jackson.databind.ser.std.NullSerializer;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.ArrayIterator;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.client.SimpleClientHttpRequestFactory;
import org.springframework.http.converter.ByteArrayHttpMessageConverter;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.ResourceHttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter;
import org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.DefaultResponseErrorHandler;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.DefaultUriBuilderFactory;
import org.springframework.web.util.UriTemplateHandler;

import java.text.DateFormat;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import java.util.TimeZone;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertInstanceOf;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;

@ContextConfiguration(classes = {HttpConfig.class})
@ExtendWith(SpringExtension.class)
class HttpConfigDiffblueTest {
    @Autowired
    private HttpConfig httpConfig;

    /**
     * Method under test: {@link HttpConfig#restTemplate()}
     */
    @Test
    void testRestTemplate() throws MissingResourceException {
        // Arrange and Act
        RestTemplate actualRestTemplateResult = httpConfig.restTemplate();

        // Assert
        List<HttpMessageConverter<?>> messageConverters = actualRestTemplateResult.getMessageConverters();
        assertEquals(6, messageConverters.size());
        HttpMessageConverter<?> getResult = messageConverters.get(5);
        ObjectMapper objectMapper = ((MappingJackson2HttpMessageConverter) getResult).getObjectMapper();
        SerializationConfig serializationConfig = objectMapper.getSerializationConfig();
        PrettyPrinter defaultPrettyPrinter = serializationConfig.getDefaultPrettyPrinter();
        assertInstanceOf(DefaultPrettyPrinter.class, defaultPrettyPrinter);
        HttpMessageConverter<?> getResult2 = messageConverters.get(3);
        List<HttpMessageConverter<?>> partConverters = ((AllEncompassingFormHttpMessageConverter) getResult2)
                .getPartConverters();
        assertEquals(5, partConverters.size());
        HttpMessageConverter<?> getResult3 = partConverters.get(4);
        ObjectMapper objectMapper2 = ((MappingJackson2HttpMessageConverter) getResult3).getObjectMapper();
        JsonFactory factory = objectMapper2.getFactory();
        assertInstanceOf(MappingJsonFactory.class, factory);
        JsonFactory factory2 = objectMapper.getFactory();
        assertInstanceOf(MappingJsonFactory.class, factory2);
        DeserializationConfig deserializationConfig = objectMapper.getDeserializationConfig();
        ContextAttributes attributes = deserializationConfig.getAttributes();
        assertInstanceOf(ContextAttributes.Impl.class, attributes);
        CacheProvider cacheProvider = deserializationConfig.getCacheProvider();
        assertInstanceOf(DefaultCacheProvider.class, cacheProvider);
        DeserializationContext deserializationContext = objectMapper2.getDeserializationContext();
        DeserializerFactory factory3 = deserializationContext.getFactory();
        assertInstanceOf(BeanDeserializerFactory.class, factory3);
        DeserializationContext deserializationContext2 = objectMapper.getDeserializationContext();
        DeserializerFactory factory4 = deserializationContext2.getFactory();
        assertInstanceOf(BeanDeserializerFactory.class, factory4);
        assertInstanceOf(DefaultDeserializationContext.Impl.class, deserializationContext);
        assertInstanceOf(DefaultDeserializationContext.Impl.class, deserializationContext2);
        DeserializationConfig deserializationConfig2 = objectMapper2.getDeserializationConfig();
        AnnotationIntrospector annotationIntrospector = deserializationConfig2.getAnnotationIntrospector();
        assertInstanceOf(AnnotationIntrospectorPair.class, annotationIntrospector);
        AnnotationIntrospector annotationIntrospector2 = deserializationConfig.getAnnotationIntrospector();
        assertInstanceOf(AnnotationIntrospectorPair.class, annotationIntrospector2);
        SerializationConfig serializationConfig2 = objectMapper2.getSerializationConfig();
        AnnotationIntrospector annotationIntrospector3 = serializationConfig2.getAnnotationIntrospector();
        assertInstanceOf(AnnotationIntrospectorPair.class, annotationIntrospector3);
        AnnotationIntrospector annotationIntrospector4 = serializationConfig.getAnnotationIntrospector();
        assertInstanceOf(AnnotationIntrospectorPair.class, annotationIntrospector4);
        ClassIntrospector classIntrospector = deserializationConfig2.getClassIntrospector();
        assertInstanceOf(BasicClassIntrospector.class, classIntrospector);
        ClassIntrospector classIntrospector2 = deserializationConfig.getClassIntrospector();
        assertInstanceOf(BasicClassIntrospector.class, classIntrospector2);
        AccessorNamingStrategy.Provider accessorNaming = deserializationConfig.getAccessorNaming();
        assertInstanceOf(DefaultAccessorNamingStrategy.Provider.class, accessorNaming);
        VisibilityChecker<?> visibilityChecker = objectMapper.getVisibilityChecker();
        assertInstanceOf(VisibilityChecker.Std.class, visibilityChecker);
        PolymorphicTypeValidator polymorphicTypeValidator = objectMapper.getPolymorphicTypeValidator();
        assertInstanceOf(LaissezFaireSubTypeValidator.class, polymorphicTypeValidator);
        SubtypeResolver subtypeResolver = objectMapper2.getSubtypeResolver();
        assertInstanceOf(StdSubtypeResolver.class, subtypeResolver);
        SubtypeResolver subtypeResolver2 = objectMapper.getSubtypeResolver();
        assertInstanceOf(StdSubtypeResolver.class, subtypeResolver2);
        SerializerFactory serializerFactory = objectMapper2.getSerializerFactory();
        assertInstanceOf(BeanSerializerFactory.class, serializerFactory);
        SerializerFactory serializerFactory2 = objectMapper.getSerializerFactory();
        assertInstanceOf(BeanSerializerFactory.class, serializerFactory2);
        SerializerProvider serializerProvider = objectMapper2.getSerializerProvider();
        assertInstanceOf(DefaultSerializerProvider.Impl.class, serializerProvider);
        SerializerProvider serializerProvider2 = objectMapper.getSerializerProvider();
        assertInstanceOf(DefaultSerializerProvider.Impl.class, serializerProvider2);
        SerializerProvider serializerProviderInstance = objectMapper2.getSerializerProviderInstance();
        assertInstanceOf(DefaultSerializerProvider.Impl.class, serializerProviderInstance);
        SerializerProvider serializerProviderInstance2 = objectMapper.getSerializerProviderInstance();
        assertInstanceOf(DefaultSerializerProvider.Impl.class, serializerProviderInstance2);
        JsonSerializer<Object> defaultNullKeySerializer = serializerProvider2.getDefaultNullKeySerializer();
        assertInstanceOf(FailingSerializer.class, defaultNullKeySerializer);
        JsonSerializer<Object> defaultNullValueSerializer = serializerProvider2.getDefaultNullValueSerializer();
        assertInstanceOf(NullSerializer.class, defaultNullValueSerializer);
        DeserializerFactoryConfig factoryConfig = ((BeanDeserializerFactory) factory3).getFactoryConfig();
        assertInstanceOf(ArrayIterator.class, factoryConfig.deserializers());
        DeserializerFactoryConfig factoryConfig2 = ((BeanDeserializerFactory) factory4).getFactoryConfig();
        Iterable<Deserializers> deserializersResult = factoryConfig2.deserializers();
        assertInstanceOf(ArrayIterator.class, deserializersResult);
        SerializerFactoryConfig factoryConfig3 = ((BeanSerializerFactory) serializerFactory).getFactoryConfig();
        Iterable<Serializers> serializersResult = factoryConfig3.serializers();
        assertInstanceOf(ArrayIterator.class, serializersResult);
        SerializerFactoryConfig factoryConfig4 = ((BeanSerializerFactory) serializerFactory2).getFactoryConfig();
        Iterable<Serializers> serializersResult2 = factoryConfig4.serializers();
        assertInstanceOf(ArrayIterator.class, serializersResult2);
        DateFormat dateFormat = objectMapper.getDateFormat();
        assertInstanceOf(StdDateFormat.class, dateFormat);
        assertInstanceOf(SimpleClientHttpRequestFactory.class, actualRestTemplateResult.getRequestFactory());
        HttpMessageConverter<?> getResult4 = partConverters.get(0);
        assertInstanceOf(ByteArrayHttpMessageConverter.class, getResult4);
        HttpMessageConverter<?> getResult5 = messageConverters.get(0);
        assertInstanceOf(ByteArrayHttpMessageConverter.class, getResult5);
        HttpMessageConverter<?> getResult6 = messageConverters.get(2);
        assertInstanceOf(ResourceHttpMessageConverter.class, getResult6);
        HttpMessageConverter<?> getResult7 = partConverters.get(1);
        assertInstanceOf(StringHttpMessageConverter.class, getResult7);
        HttpMessageConverter<?> getResult8 = messageConverters.get(1);
        assertInstanceOf(StringHttpMessageConverter.class, getResult8);
        assertInstanceOf(MappingJackson2HttpMessageConverter.class, getResult3);
        assertInstanceOf(MappingJackson2HttpMessageConverter.class, getResult);
        assertInstanceOf(AllEncompassingFormHttpMessageConverter.class, getResult2);
        HttpMessageConverter<?> getResult9 = partConverters.get(3);
        assertInstanceOf(Jaxb2RootElementHttpMessageConverter.class, getResult9);
        HttpMessageConverter<?> getResult10 = messageConverters.get(4);
        assertInstanceOf(Jaxb2RootElementHttpMessageConverter.class, getResult10);
        assertInstanceOf(DefaultResponseErrorHandler.class, actualRestTemplateResult.getErrorHandler());
        UriTemplateHandler uriTemplateHandler = actualRestTemplateResult.getUriTemplateHandler();
        assertInstanceOf(DefaultUriBuilderFactory.class, uriTemplateHandler);
        assertEquals(" ", factory.getRootValueSeparator());
        assertEquals(" ", factory2.getRootValueSeparator());
        Version versionResult = annotationIntrospector2.version();
        assertEquals("", versionResult.getArtifactId());
        assertEquals("", versionResult.getGroupId());
        Locale locale = deserializationConfig.getLocale();
        assertEquals("", locale.getDisplayScript());
        assertEquals("", locale.getDisplayVariant());
        assertEquals("", locale.getScript());
        assertEquals("", locale.getVariant());
        List<MediaType> supportedMediaTypes = getResult5.getSupportedMediaTypes();
        assertEquals(2, supportedMediaTypes.size());
        MediaType getResult11 = supportedMediaTypes.get(1);
        assertEquals("*", getResult11.getSubtype());
        assertEquals("*", getResult11.getType());
        List<MediaType> supportedMediaTypes2 = getResult.getSupportedMediaTypes();
        assertEquals(2, supportedMediaTypes2.size());
        MediaType getResult12 = supportedMediaTypes2.get(1);
        assertEquals("*+json", getResult12.getSubtype());
        List<MediaType> supportedMediaTypes3 = getResult10.getSupportedMediaTypes();
        assertEquals(3, supportedMediaTypes3.size());
        MediaType getResult13 = supportedMediaTypes3.get(2);
        assertEquals("*+xml", getResult13.getSubtype());
        assertEquals("//0.0.0", versionResult.toFullString());
        TimeZone timeZone = deserializationConfig.getTimeZone();
        assertEquals("Coordinated Universal Time", timeZone.getDisplayName());
        assertEquals("English (United Kingdom)", locale.getDisplayName());
        assertEquals("English", locale.getDisplayLanguage());
        assertEquals("GB", locale.getCountry());
        assertEquals("GBR", locale.getISO3Country());
        assertEquals("ISO-8859-1", ((StringHttpMessageConverter) getResult8).getDefaultCharset().name());
        assertEquals("JSON", factory.getFormatName());
        assertEquals("JSON", factory2.getFormatName());
        Base64Variant base64Variant = deserializationConfig.getBase64Variant();
        assertEquals("MIME-NO-LINEFEEDS", base64Variant.getName());
        assertEquals("MIME-NO-LINEFEEDS", base64Variant.toString());
        assertEquals("UTC", timeZone.getID());
        assertEquals("UTF-8", ((StringHttpMessageConverter) getResult7).getDefaultCharset().name());
        assertEquals("United Kingdom", locale.getDisplayCountry());
        assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSX', 'EEE, dd MMM yyyy HH:mm:ss zzz' (lenient)]",
                ((StdDateFormat) dateFormat).toPattern());
        MediaType getResult14 = supportedMediaTypes.get(0);
        assertEquals("application", getResult14.getType());
        List<MediaType> supportedMediaTypes4 = getResult2.getSupportedMediaTypes();
        assertEquals(4, supportedMediaTypes4.size());
        MediaType getResult15 = supportedMediaTypes4.get(0);
        assertEquals("application", getResult15.getType());
        MediaType getResult16 = supportedMediaTypes3.get(0);
        assertEquals("application", getResult16.getType());
        assertEquals("application", getResult13.getType());
        MediaType getResult17 = supportedMediaTypes2.get(0);
        assertEquals("application", getResult17.getType());
        assertEquals("application", getResult12.getType());
        Version versionResult2 = factory2.version();
        assertEquals("com.fasterxml.jackson.core", versionResult2.getGroupId());
        Version versionResult3 = objectMapper.version();
        assertEquals("com.fasterxml.jackson.core", versionResult3.getGroupId());
        assertEquals("com.fasterxml.jackson.core/jackson-core/2.17.2", versionResult2.toFullString());
        assertEquals("com.fasterxml.jackson.core/jackson-databind/2.17.2", versionResult3.toFullString());
        assertEquals("en", locale.getLanguage());
        assertEquals("eng", locale.getISO3Language());
        MediaType getResult18 = supportedMediaTypes4.get(1);
        assertEquals("form-data", getResult18.getSubtype());
        assertEquals("jackson-core", versionResult2.getArtifactId());
        assertEquals("jackson-databind", versionResult3.getArtifactId());
        assertEquals("json", getResult17.getSubtype());
        assertEquals("json", getResult12.getSubtypeSuffix());
        MediaType getResult19 = supportedMediaTypes4.get(2);
        assertEquals("mixed", getResult19.getSubtype());
        assertEquals("multipart", getResult18.getType());
        assertEquals("multipart", getResult19.getType());
        MediaType getResult20 = supportedMediaTypes4.get(3);
        assertEquals("multipart", getResult20.getType());
        assertEquals("octet-stream", getResult14.getSubtype());
        List<MediaType> supportedMediaTypes5 = getResult8.getSupportedMediaTypes();
        assertEquals(2, supportedMediaTypes5.size());
        MediaType getResult21 = supportedMediaTypes5.get(0);
        assertEquals("plain", getResult21.getSubtype());
        assertEquals("related", getResult20.getSubtype());
        assertEquals("text", getResult21.getType());
        MediaType getResult22 = supportedMediaTypes3.get(1);
        assertEquals("text", getResult22.getType());
        assertEquals("x-www-form-urlencoded", getResult15.getSubtype());
        assertEquals("xml", getResult16.getSubtype());
        assertEquals("xml", getResult22.getSubtype());
        assertEquals("xml", getResult13.getSubtypeSuffix());
        assertEquals('=', base64Variant.getPaddingChar());
        assertNull(serializerProvider.getGenerator());
        assertNull(serializerProvider2.getGenerator());
        assertNull(serializerProviderInstance.getGenerator());
        assertNull(serializerProviderInstance2.getGenerator());
        assertNull(deserializationContext.getParser());
        assertNull(deserializationContext2.getParser());
        assertNull(factory.getCharacterEscapes());
        assertNull(factory2.getCharacterEscapes());
        assertNull(factory.getInputDecorator());
        assertNull(factory2.getInputDecorator());
        assertNull(factory.getOutputDecorator());
        assertNull(factory2.getOutputDecorator());
        assertNull(deserializationContext.getConfig());
        assertNull(deserializationContext2.getConfig());
        assertNull(objectMapper2.getInjectableValues());
        assertNull(objectMapper.getInjectableValues());
        assertNull(deserializationContext.getContextualType());
        assertNull(deserializationContext2.getContextualType());
        assertNull(defaultNullKeySerializer.getDelegatee());
        assertNull(defaultNullValueSerializer.getDelegatee());
        assertNull(deserializationConfig2.getFullRootName());
        assertNull(deserializationConfig.getFullRootName());
        assertNull(serializationConfig2.getFullRootName());
        assertNull(serializationConfig.getFullRootName());
        assertNull(objectMapper2.getPropertyNamingStrategy());
        assertNull(objectMapper.getPropertyNamingStrategy());
        assertNull(deserializationConfig2.getPropertyNamingStrategy());
        assertNull(deserializationConfig.getPropertyNamingStrategy());
        assertNull(serializationConfig2.getPropertyNamingStrategy());
        assertNull(serializationConfig.getPropertyNamingStrategy());
        assertNull(serializerProvider.getConfig());
        assertNull(serializerProvider2.getConfig());
        assertNull(deserializationConfig2.getHandlerInstantiator());
        assertNull(deserializationConfig.getHandlerInstantiator());
        assertNull(serializationConfig2.getHandlerInstantiator());
        assertNull(serializationConfig.getHandlerInstantiator());
        assertNull(serializationConfig2.getFilterProvider());
        assertNull(serializationConfig.getFilterProvider());
        assertNull(serializerProviderInstance.getFilterProvider());
        assertNull(serializerProviderInstance2.getFilterProvider());
        assertNull(deserializationConfig2.getProblemHandlers());
        assertNull(deserializationConfig.getProblemHandlers());
        assertNull(deserializationConfig2.getDefaultMergeable());
        assertNull(deserializationConfig.getDefaultMergeable());
        assertNull(serializationConfig2.getDefaultMergeable());
        assertNull(serializationConfig.getDefaultMergeable());
        assertNull(factory.getFormatReadFeatureType());
        assertNull(factory2.getFormatReadFeatureType());
        assertNull(factory.getFormatWriteFeatureType());
        assertNull(factory2.getFormatWriteFeatureType());
        JsonInclude.Value defaultPropertyInclusion = deserializationConfig.getDefaultPropertyInclusion();
        assertNull(defaultPropertyInclusion.getContentFilter());
        assertNull(defaultPropertyInclusion.getValueFilter());
        assertNull(deserializationContext.getActiveView());
        assertNull(deserializationContext2.getActiveView());
        assertNull(serializerProvider.getActiveView());
        assertNull(serializerProvider2.getActiveView());
        assertNull(serializerProviderInstance.getActiveView());
        assertNull(serializerProviderInstance2.getActiveView());
        assertNull(deserializationConfig2.getActiveView());
        assertNull(deserializationConfig.getActiveView());
        assertNull(serializationConfig2.getActiveView());
        assertNull(serializationConfig.getActiveView());
        TypeFactory typeFactory = objectMapper2.getTypeFactory();
        assertNull(typeFactory.getClassLoader());
        TypeFactory typeFactory2 = objectMapper.getTypeFactory();
        assertNull(typeFactory2.getClassLoader());
        assertNull(deserializationConfig2.getRootName());
        assertNull(deserializationConfig.getRootName());
        assertNull(serializationConfig2.getRootName());
        assertNull(serializationConfig.getRootName());
        assertNull(getResult14.getSubtypeSuffix());
        assertNull(getResult11.getSubtypeSuffix());
        assertNull(getResult21.getSubtypeSuffix());
        assertNull(getResult15.getSubtypeSuffix());
        assertNull(getResult18.getSubtypeSuffix());
        assertNull(getResult19.getSubtypeSuffix());
        assertNull(getResult20.getSubtypeSuffix());
        assertNull(getResult16.getSubtypeSuffix());
        assertNull(getResult22.getSubtypeSuffix());
        assertNull(getResult17.getSubtypeSuffix());
        assertNull(((ByteArrayHttpMessageConverter) getResult4).getDefaultCharset());
        assertNull(((ByteArrayHttpMessageConverter) getResult5).getDefaultCharset());
        assertNull(((ResourceHttpMessageConverter) getResult6).getDefaultCharset());
        assertNull(((MappingJackson2HttpMessageConverter) getResult3).getDefaultCharset());
        assertNull(((MappingJackson2HttpMessageConverter) getResult).getDefaultCharset());
        assertNull(((Jaxb2RootElementHttpMessageConverter) getResult9).getDefaultCharset());
        assertNull(((Jaxb2RootElementHttpMessageConverter) getResult10).getDefaultCharset());
        assertNull(getResult14.getCharset());
        assertNull(getResult11.getCharset());
        assertNull(getResult21.getCharset());
        assertNull(getResult15.getCharset());
        assertNull(getResult18.getCharset());
        assertNull(getResult19.getCharset());
        assertNull(getResult20.getCharset());
        assertNull(getResult16.getCharset());
        assertNull(getResult22.getCharset());
        assertNull(getResult13.getCharset());
        assertNull(getResult17.getCharset());
        assertNull(getResult12.getCharset());
        assertNull(dateFormat.getNumberFormat());
        assertNull(dateFormat.getCalendar());
        assertNull(dateFormat.getTimeZone());
        assertNull(actualRestTemplateResult.getObservationConvention());
        assertEquals(0, factory.getFormatGeneratorFeatures());
        assertEquals(0, factory2.getFormatGeneratorFeatures());
        assertEquals(0, factory.getFormatParserFeatures());
        assertEquals(0, factory2.getFormatParserFeatures());
        assertEquals(0, versionResult.getMajorVersion());
        assertEquals(0, versionResult.getMinorVersion());
        assertEquals(0, versionResult.getPatchLevel());
        assertEquals(0, deserializationContext.getDeserializationFeatures());
        assertEquals(0, deserializationContext2.getDeserializationFeatures());
        assertEquals(0, timeZone.getDSTSavings());
        assertEquals(1, factory.getParserFeatures());
        assertEquals(1, factory2.getParserFeatures());
        List<MediaType> supportedMediaTypes6 = getResult6.getSupportedMediaTypes();
        assertEquals(1, supportedMediaTypes6.size());
        assertEquals(1.0d, getResult14.getQualityValue());
        assertEquals(1.0d, getResult11.getQualityValue());
        assertEquals(1.0d, getResult21.getQualityValue());
        assertEquals(1.0d, getResult15.getQualityValue());
        assertEquals(1.0d, getResult18.getQualityValue());
        assertEquals(1.0d, getResult19.getQualityValue());
        assertEquals(1.0d, getResult20.getQualityValue());
        assertEquals(1.0d, getResult16.getQualityValue());
        assertEquals(1.0d, getResult22.getQualityValue());
        assertEquals(1.0d, getResult13.getQualityValue());
        assertEquals(1.0d, getResult17.getQualityValue());
        assertEquals(1.0d, getResult12.getQualityValue());
        assertEquals(17, versionResult2.getMinorVersion());
        assertEquals(17, versionResult3.getMinorVersion());
        assertEquals(2, versionResult2.getMajorVersion());
        assertEquals(2, versionResult3.getMajorVersion());
        assertEquals(2, versionResult2.getPatchLevel());
        assertEquals(2, versionResult3.getPatchLevel());
        assertEquals(2079, factory.getGeneratorFeatures());
        assertEquals(2079, factory2.getGeneratorFeatures());
        assertEquals(21771068, serializationConfig2.getSerializationFeatures());
        assertEquals(21771068, serializationConfig.getSerializationFeatures());
        Set<Object> registeredModuleIds = objectMapper.getRegisteredModuleIds();
        assertEquals(3, registeredModuleIds.size());
        assertEquals(31, factory.getFactoryFeatures());
        assertEquals(31, factory2.getFactoryFeatures());
        assertEquals(473998464, deserializationConfig2.getDeserializationFeatures());
        assertEquals(473998464, deserializationConfig.getDeserializationFeatures());
        JsonNodeFactory nodeFactory = objectMapper.getNodeFactory();
        assertEquals(9999, nodeFactory.getMaxElementIndexForInsert());
        assertEquals(JsonInclude.Include.ALWAYS, serializationConfig2.getSerializationInclusion());
        assertEquals(JsonInclude.Include.ALWAYS, serializationConfig.getSerializationInclusion());
        assertEquals(JsonInclude.Include.USE_DEFAULTS, defaultPropertyInclusion.getContentInclusion());
        assertEquals(JsonInclude.Include.USE_DEFAULTS, defaultPropertyInclusion.getValueInclusion());
        JsonSetter.Value defaultSetterInfo = deserializationConfig.getDefaultSetterInfo();
        assertEquals(Nulls.DEFAULT, defaultSetterInfo.getContentNulls());
        assertEquals(Nulls.DEFAULT, defaultSetterInfo.getValueNulls());
        assertEquals(DefaultUriBuilderFactory.EncodingMode.URI_COMPONENT,
                ((DefaultUriBuilderFactory) uriTemplateHandler).getEncodingMode());
        assertFalse(versionResult2.isSnapshot());
        assertFalse(versionResult.isSnapshot());
        assertFalse(versionResult3.isSnapshot());
        assertFalse(versionResult2.isUknownVersion());
        assertFalse(versionResult3.isUknownVersion());
        assertFalse(versionResult2.isUnknownVersion());
        assertFalse(versionResult3.isUnknownVersion());
        assertFalse(defaultNullKeySerializer.isUnwrappingSerializer());
        assertFalse(defaultNullValueSerializer.isUnwrappingSerializer());
        assertFalse(factoryConfig.hasAbstractTypeResolvers());
        assertFalse(factoryConfig2.hasAbstractTypeResolvers());
        assertFalse(deserializationConfig2.hasExplicitTimeZone());
        assertFalse(deserializationConfig.hasExplicitTimeZone());
        assertFalse(serializationConfig2.hasExplicitTimeZone());
        assertFalse(serializationConfig.hasExplicitTimeZone());
        assertFalse(locale.hasExtensions());
        assertFalse(((Jaxb2RootElementHttpMessageConverter) getResult9).isProcessExternalEntities());
        assertFalse(((Jaxb2RootElementHttpMessageConverter) getResult10).isProcessExternalEntities());
        assertFalse(((Jaxb2RootElementHttpMessageConverter) getResult9).isSupportDtd());
        assertFalse(((Jaxb2RootElementHttpMessageConverter) getResult10).isSupportDtd());
        assertFalse(getResult11.isConcrete());
        assertFalse(getResult13.isConcrete());
        assertFalse(getResult12.isConcrete());
        assertFalse(getResult14.isWildcardType());
        assertFalse(getResult21.isWildcardType());
        assertFalse(getResult15.isWildcardType());
        assertFalse(getResult18.isWildcardType());
        assertFalse(getResult19.isWildcardType());
        assertFalse(getResult20.isWildcardType());
        assertFalse(getResult16.isWildcardType());
        assertFalse(getResult22.isWildcardType());
        assertFalse(getResult13.isWildcardType());
        assertFalse(getResult17.isWildcardType());
        assertFalse(getResult12.isWildcardType());
        assertFalse(((DefaultUriBuilderFactory) uriTemplateHandler).hasBaseUri());
        assertTrue(versionResult.isUknownVersion());
        assertTrue(versionResult.isUnknownVersion());
        assertTrue(factoryConfig.hasDeserializerModifiers());
        assertTrue(factoryConfig2.hasDeserializerModifiers());
        assertTrue(factoryConfig.hasDeserializers());
        assertTrue(factoryConfig2.hasDeserializers());
        assertTrue(factoryConfig.hasKeyDeserializers());
        assertTrue(factoryConfig2.hasKeyDeserializers());
        assertTrue(factoryConfig.hasValueInstantiators());
        assertTrue(factoryConfig2.hasValueInstantiators());
        assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
        assertTrue(deserializationConfig.isAnnotationProcessingEnabled());
        assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
        assertTrue(serializationConfig.isAnnotationProcessingEnabled());
        assertTrue(factoryConfig3.hasKeySerializers());
        assertTrue(factoryConfig4.hasKeySerializers());
        assertTrue(factoryConfig3.hasSerializerModifiers());
        assertTrue(factoryConfig4.hasSerializerModifiers());
        assertTrue(factoryConfig3.hasSerializers());
        assertTrue(factoryConfig4.hasSerializers());
        assertTrue(((ArrayIterator<Deserializers>) deserializersResult).hasNext());
        assertTrue(((ArrayIterator<Serializers>) serializersResult).hasNext());
        assertTrue(((ArrayIterator<Serializers>) serializersResult2).hasNext());
        assertTrue(((StdDateFormat) dateFormat).isColonIncludedInTimeZone());
        assertTrue(actualRestTemplateResult.getObservationRegistry().isNoop());
        assertTrue(dateFormat.isLenient());
        assertTrue(actualRestTemplateResult.getClientHttpRequestInitializers().isEmpty());
        assertTrue(actualRestTemplateResult.getInterceptors().isEmpty());
        Map<String, ?> defaultUriVariables = ((DefaultUriBuilderFactory) uriTemplateHandler).getDefaultUriVariables();
        assertTrue(defaultUriVariables.isEmpty());
        Set<Character> extensionKeys = locale.getExtensionKeys();
        assertTrue(extensionKeys.isEmpty());
        assertTrue(getResult14.isConcrete());
        assertTrue(getResult21.isConcrete());
        assertTrue(getResult15.isConcrete());
        assertTrue(getResult18.isConcrete());
        assertTrue(getResult19.isConcrete());
        assertTrue(getResult20.isConcrete());
        assertTrue(getResult16.isConcrete());
        assertTrue(getResult22.isConcrete());
        assertTrue(getResult17.isConcrete());
        assertTrue(getResult11.isWildcardType());
        assertEquals(registeredModuleIds, objectMapper2.getRegisteredModuleIds());
        assertEquals(supportedMediaTypes3, getResult9.getSupportedMediaTypes());
        assertEquals(supportedMediaTypes2, getResult3.getSupportedMediaTypes());
        assertEquals(Integer.MAX_VALUE, base64Variant.getMaxLineLength());
        assertEquals('=', base64Variant.getPaddingByte());
        assertSame(versionResult2, factory.version());
        assertSame(versionResult, annotationIntrospector.version());
        assertSame(versionResult, annotationIntrospector3.version());
        assertSame(versionResult, annotationIntrospector4.version());
        assertSame(nodeFactory, deserializationConfig2.getNodeFactory());
        assertSame(nodeFactory, deserializationConfig.getNodeFactory());
        assertSame(nodeFactory, objectMapper2.getNodeFactory());
        assertSame(serializationConfig2, serializerProviderInstance.getConfig());
        assertSame(serializationConfig, serializerProviderInstance2.getConfig());
        assertSame(typeFactory, serializerProviderInstance.getTypeFactory());
        assertSame(typeFactory, deserializationConfig2.getTypeFactory());
        assertSame(typeFactory, serializationConfig2.getTypeFactory());
        assertSame(typeFactory2, serializerProviderInstance2.getTypeFactory());
        assertSame(typeFactory2, deserializationConfig.getTypeFactory());
        assertSame(typeFactory2, serializationConfig.getTypeFactory());
        assertSame(versionResult3, objectMapper2.version());
        assertSame(base64Variant, deserializationConfig2.getBase64Variant());
        assertSame(base64Variant, serializationConfig2.getBase64Variant());
        assertSame(base64Variant, serializationConfig.getBase64Variant());
        assertSame(locale, serializerProviderInstance.getLocale());
        assertSame(locale, serializerProviderInstance2.getLocale());
        assertSame(locale, deserializationConfig2.getLocale());
        assertSame(locale, serializationConfig2.getLocale());
        assertSame(locale, serializationConfig.getLocale());
        assertSame(timeZone, serializerProviderInstance.getTimeZone());
        assertSame(timeZone, serializerProviderInstance2.getTimeZone());
        assertSame(timeZone, deserializationConfig2.getTimeZone());
        assertSame(timeZone, serializationConfig2.getTimeZone());
        assertSame(timeZone, serializationConfig.getTimeZone());
        assertSame(defaultPropertyInclusion, deserializationConfig2.getDefaultPropertyInclusion());
        assertSame(defaultPropertyInclusion, serializationConfig2.getDefaultPropertyInclusion());
        assertSame(defaultPropertyInclusion, serializationConfig.getDefaultPropertyInclusion());
        assertSame(defaultSetterInfo, deserializationConfig2.getDefaultSetterInfo());
        assertSame(defaultSetterInfo, serializationConfig2.getDefaultSetterInfo());
        assertSame(defaultSetterInfo, serializationConfig.getDefaultSetterInfo());
        assertSame(getResult11, supportedMediaTypes5.get(1));
        assertSame(getResult11, supportedMediaTypes6.get(0));
        assertSame(extensionKeys, locale.getUnicodeLocaleAttributes());
        assertSame(extensionKeys, locale.getUnicodeLocaleKeys());
        assertSame(objectMapper2, factory.getCodec());
        assertSame(objectMapper, factory2.getCodec());
        assertSame(defaultUriVariables, getResult14.getParameters());
        assertSame(defaultUriVariables, getResult11.getParameters());
        assertSame(defaultUriVariables, getResult21.getParameters());
        assertSame(defaultUriVariables, getResult15.getParameters());
        assertSame(defaultUriVariables, getResult18.getParameters());
        assertSame(defaultUriVariables, getResult19.getParameters());
        assertSame(defaultUriVariables, getResult20.getParameters());
        assertSame(defaultUriVariables, getResult16.getParameters());
        assertSame(defaultUriVariables, getResult22.getParameters());
        assertSame(defaultUriVariables, getResult13.getParameters());
        assertSame(defaultUriVariables, getResult17.getParameters());
        assertSame(defaultUriVariables, getResult12.getParameters());
        assertSame(defaultPrettyPrinter, serializationConfig2.getDefaultPrettyPrinter());
        assertSame(factory, objectMapper2.getJsonFactory());
        assertSame(factory2, objectMapper.getJsonFactory());
        assertSame(attributes, deserializationConfig2.getAttributes());
        assertSame(attributes, serializationConfig2.getAttributes());
        assertSame(attributes, serializationConfig.getAttributes());
        assertSame(cacheProvider, deserializationConfig2.getCacheProvider());
        assertSame(cacheProvider, serializationConfig2.getCacheProvider());
        assertSame(cacheProvider, serializationConfig.getCacheProvider());
        assertSame(annotationIntrospector3, serializerProviderInstance.getAnnotationIntrospector());
        assertSame(annotationIntrospector4, serializerProviderInstance2.getAnnotationIntrospector());
        assertSame(classIntrospector, serializationConfig2.getClassIntrospector());
        assertSame(classIntrospector2, serializationConfig.getClassIntrospector());
        assertSame(accessorNaming, deserializationConfig2.getAccessorNaming());
        assertSame(accessorNaming, serializationConfig2.getAccessorNaming());
        assertSame(accessorNaming, serializationConfig.getAccessorNaming());
        assertSame(visibilityChecker, objectMapper2.getVisibilityChecker());
        assertSame(visibilityChecker, deserializationConfig2.getDefaultVisibilityChecker());
        assertSame(visibilityChecker, deserializationConfig.getDefaultVisibilityChecker());
        assertSame(visibilityChecker, serializationConfig2.getDefaultVisibilityChecker());
        assertSame(visibilityChecker, serializationConfig.getDefaultVisibilityChecker());
        assertSame(polymorphicTypeValidator, objectMapper2.getPolymorphicTypeValidator());
        assertSame(polymorphicTypeValidator, deserializationConfig2.getPolymorphicTypeValidator());
        assertSame(polymorphicTypeValidator, deserializationConfig.getPolymorphicTypeValidator());
        assertSame(polymorphicTypeValidator, serializationConfig2.getPolymorphicTypeValidator());
        assertSame(polymorphicTypeValidator, serializationConfig.getPolymorphicTypeValidator());
        assertSame(subtypeResolver, deserializationConfig2.getSubtypeResolver());
        assertSame(subtypeResolver, serializationConfig2.getSubtypeResolver());
        assertSame(subtypeResolver2, deserializationConfig.getSubtypeResolver());
        assertSame(subtypeResolver2, serializationConfig.getSubtypeResolver());
        assertSame(defaultNullKeySerializer, serializerProvider.getDefaultNullKeySerializer());
        assertSame(defaultNullKeySerializer, serializerProviderInstance.getDefaultNullKeySerializer());
        assertSame(defaultNullKeySerializer, serializerProviderInstance2.getDefaultNullKeySerializer());
        assertSame(defaultNullValueSerializer, serializerProvider.getDefaultNullValueSerializer());
        assertSame(defaultNullValueSerializer, serializerProviderInstance.getDefaultNullValueSerializer());
        assertSame(defaultNullValueSerializer, serializerProviderInstance2.getDefaultNullValueSerializer());
        assertSame(dateFormat, objectMapper2.getDateFormat());
        assertSame(dateFormat, deserializationConfig2.getDateFormat());
        assertSame(dateFormat, deserializationConfig.getDateFormat());
        assertSame(dateFormat, serializationConfig2.getDateFormat());
        assertSame(dateFormat, serializationConfig.getDateFormat());
    }

    /**
     * Method under test: {@link HttpConfig#buildHeaders()}
     */
    @Test
    void testBuildHeaders() {
        // Arrange and Act
        HttpHeaders actualBuildHeadersResult = httpConfig.buildHeaders();

        // Assert
        assertEquals(3, actualBuildHeadersResult.size());
        List<String> getResult = actualBuildHeadersResult.get(HttpHeaders.ACCEPT);
        assertEquals(1, getResult.size());
        assertEquals("application/json", getResult.get(0));
        List<String> getResult2 = actualBuildHeadersResult.get(HttpHeaders.CONTENT_TYPE);
        assertEquals(1, getResult2.size());
        assertEquals("application/json", getResult2.get(0));
        List<String> getResult3 = actualBuildHeadersResult.get(HttpHeaders.USER_AGENT);
        assertEquals(1, getResult3.size());
        assertEquals("defaultAgent", getResult3.get(0));
    }
}
